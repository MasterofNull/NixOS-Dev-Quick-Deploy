# NixOS Configuration - AIDB Development Environment
# Generated by: nixos-quick-deploy.sh v@SCRIPT_VERSION@
# Generated: @GENERATED_AT@
# Hostname: @HOSTNAME@ | User: @USER@
# Target: NixOS 25.05+ with Wayland-first, security hardening

{ config, pkgs, lib, ... }:

let
  huggingfaceStateDirName = "huggingface";
  huggingfaceDataDir = "/var/lib/${huggingfaceStateDirName}";
  huggingfaceCacheDir = "${huggingfaceDataDir}/cache";
  huggingfaceModelId = "meta-llama/Meta-Llama-3-8B-Instruct";
  huggingfaceImage = "ghcr.io/huggingface/text-generation-inference:latest";
  huggingfaceTokenSource = "/home/@USER@/.config/huggingface/token";
  huggingfacePrepScript = pkgs.writeShellScript "huggingface-tgi-prep" ''
    set -euo pipefail
    state_root="''${STATE_DIRECTORY:-${huggingfaceDataDir}}"
    cache_root="''${CACHE_DIRECTORY:-${huggingfaceCacheDir}}"
    token_source=${lib.escapeShellArg huggingfaceTokenSource}
    token_dest="''${state_root}/token"

    ${pkgs.coreutils}/bin/mkdir -p "${huggingfaceDataDir}" "${huggingfaceCacheDir}"
    ${pkgs.coreutils}/bin/mkdir -p "''${state_root}" "''${cache_root}"

    if [ -f "${token_source}" ]; then
      ${pkgs.coreutils}/bin/install -m600 -D "${token_source}" "${token_dest}"
    fi

    if [ ! -f "${token_dest}" ]; then
      ${pkgs.util-linux}/bin/logger -t huggingface-tgi "Missing Hugging Face token. Create ${huggingfaceTokenSource} to start the service."
      exit 1
    fi

    ${pkgs.podman}/bin/podman rm -f huggingface-tgi >/dev/null 2>&1 || true
    ${pkgs.podman}/bin/podman pull ${lib.escapeShellArg huggingfaceImage}
  '';
  huggingfaceStartScript = pkgs.writeShellScript "huggingface-tgi-start" ''
    set -euo pipefail
    state_root="''${STATE_DIRECTORY:-${huggingfaceDataDir}}"
    cache_root="''${CACHE_DIRECTORY:-${huggingfaceCacheDir}}"

    ${pkgs.coreutils}/bin/mkdir -p "${huggingfaceDataDir}" "${huggingfaceCacheDir}"
    ${pkgs.coreutils}/bin/mkdir -p "''${state_root}" "''${cache_root}"

    exec ${pkgs.podman}/bin/podman run \
      --rm \
      --name huggingface-tgi \
      --net host \
      -v "''${state_root}:/data" \
      -e HF_HOME=/data \
      -e HUGGINGFACE_HUB_CACHE=/data/cache \
      -e TRANSFORMERS_CACHE=/data/cache \
      ${lib.escapeShellArg huggingfaceImage} \
      --model-id ${lib.escapeShellArg huggingfaceModelId} \
      --port 8080 \
      --num-shard 1
  '';
  huggingfaceStopScript = pkgs.writeShellScript "huggingface-tgi-stop" ''
    ${pkgs.podman}/bin/podman stop huggingface-tgi >/dev/null 2>&1 || true
  '';
  giteaStateDir = "/var/lib/gitea";
  giteaAppDataDir = "${giteaStateDir}/data";
  giteaRepositoriesDir = "${giteaAppDataDir}/repositories";
  giteaLfsDir = "${giteaAppDataDir}/lfs";
  giteaIssuesIndexerPath = "${giteaAppDataDir}/indexers/issues.bleve";
  giteaRepoIndexerPath = "${giteaAppDataDir}/indexers/repos.bleve";
  giteaDatabasePath = "${giteaAppDataDir}/gitea.db";
  giteaDomain = "@HOSTNAME@";
  giteaHttpPort = 3000;
  giteaSshPort = 2222;
  giteaRootUrl = "http://${giteaDomain}:${toString giteaHttpPort}/";
  giteaAdminSecrets = @GITEA_ADMIN_SECRETS_SET@;
  giteaSecrets = {
    secretKey = "@GITEA_SECRET_KEY@";
    internalToken = "@GITEA_INTERNAL_TOKEN@";
    lfsJwtSecret = "@GITEA_LFS_JWT_SECRET@";
    oauthJwtSecret = "@GITEA_JWT_SECRET@";
  } // giteaAdminSecrets;
  giteaSharedSettings = {
    server = {
      PROTOCOL = "http";
      DOMAIN = giteaDomain;
      HTTP_ADDR = "0.0.0.0";
      HTTP_PORT = giteaHttpPort;
      ROOT_URL = giteaRootUrl;
      APP_DATA_PATH = giteaAppDataDir;
      STATIC_ROOT_PATH = "${giteaAppDataDir}/public";
      ENABLE_GZIP = true;
      LFS_START_SERVER = true;
      LFS_JWT_SECRET = giteaSecrets.lfsJwtSecret;
      DISABLE_SSH = false;
      SSH_DOMAIN = giteaDomain;
      SSH_PORT = giteaSshPort;
      SSH_LISTEN_PORT = giteaSshPort;
      START_SSH_SERVER = true;
      LANDING_PAGE = "explore";
    };
    database = {
      DB_TYPE = "sqlite3";
      PATH = giteaDatabasePath;
      LOG_SQL = false;
    };
    repository = {
      ROOT = giteaRepositoriesDir;
      FORCE_PRIVATE = false;
    };
    packages.ENABLED = true;
    actions = {
      ENABLED = true;
      DEFAULT_ACTIONS_URL = "https://gitea.com";
    };
    indexer = {
      ISSUE_INDEXER_TYPE = "bleve";
      ISSUE_INDEXER_PATH = giteaIssuesIndexerPath;
      REPO_INDEXER_ENABLED = true;
      REPO_INDEXER_PATH = giteaRepoIndexerPath;
    };
    ui = {
      DEFAULT_THEME = "arc-green";
      THEMES = "arc-green,auto,github";
      DEFAULT_SHOW_FULL_NAME = true;
    };
    service = {
      REGISTER_EMAIL_CONFIRM = false;
      DISABLE_REGISTRATION = false;
      REQUIRE_SIGNIN_VIEW = false;
      ENABLE_NOTIFY_MAIL = false;
    };
    security = {
      INSTALL_LOCK = true;
      PASSWORD_HASH_ALGO = "argon2";
      SECRET_KEY = giteaSecrets.secretKey;
      INTERNAL_TOKEN = giteaSecrets.internalToken;
    };
    oauth2.JWT_SECRET = giteaSecrets.oauthJwtSecret;
    log = {
      MODE = "console";
      LEVEL = "info";
    };
    lfs = {
      STORAGE_TYPE = "local";
      PATH = giteaLfsDir;
    };
  };
  # Optional Gitea admin bootstrap (populated by installer)
  @GITEA_ADMIN_VARIABLES_BLOCK@
in

{
  imports = [ ./hardware-configuration.nix ];

  # ============================================================================
  # Boot Configuration (Modern EFI)
  # ============================================================================
  boot = {
    loader = {
      systemd-boot.enable = lib.mkDefault true;
      efi.canTouchEfiVariables = lib.mkDefault true;
      # Security: Timeout for boot menu
      timeout = lib.mkDefault 3;
    };

    # CPU Microcode updates (auto-detected: @CPU_VENDOR_LABEL@ CPU)
    # Critical security and performance updates from CPU vendor
    @INITRD_KERNEL_MODULES@

    # Security: Enable kernel hardening
    kernelModules = [ ];  # Additional modules loaded after initial boot
    kernel.sysctl = {
      # Security: Disable unprivileged BPF and user namespaces
      "kernel.unprivileged_bpf_disabled" = 1;
      "kernel.unprivileged_userns_clone" = 0;
      "net.core.bpf_jit_harden" = 2;

      # Performance: Network tuning for low latency
      "net.core.netdev_max_backlog" = 16384;
      "net.core.somaxconn" = 8192;
      "net.ipv4.tcp_fastopen" = 3;

      # Security: Harden TCP/IP stack
      "net.ipv4.tcp_syncookies" = 1;
      "net.ipv4.conf.default.rp_filter" = 1;
      "net.ipv4.conf.all.rp_filter" = 1;
    };

    # Hibernation support (resume from swap)
    # The resume device is auto-detected from hardware-configuration.nix
    # To enable hibernation: systemctl hibernate
    resumeDevice = lib.mkDefault "";  # Auto-detected from swapDevices

    # Kernel parameters for better memory management and performance
    kernelParams = [
      # Enable zswap for compressed swap cache (better performance)
      "zswap.enabled=1"
      "zswap.compressor=zstd"
      "zswap.zpool=z3fold"

      # Quiet boot (cleaner boot messages)
      "quiet"
      "splash"

      # Performance: Disable CPU security mitigations (OPTIONAL - commented for security)
      # WARNING: Only enable on trusted systems where performance > security
      # Uncomment to disable Spectre/Meltdown mitigations for ~10-30% performance gain
      # "mitigations=off"
    ];
  };
  @MICROCODE_SECTION@

  @GPU_HARDWARE_SECTION@

  # ============================================================================
  # Security Hardening
  # ============================================================================
  security = {
    # Sudo security
    sudo = {
      enable = true;
      execWheelOnly = true;  # Only wheel group can sudo
      wheelNeedsPassword = true;
    };
    # Polkit for privilege escalation (required for GUI apps)
    polkit.enable = true;
    # AppArmor for mandatory access control
    apparmor.enable = true;
  };

  # ============================================================================
  # Networking (Secure defaults)
  # ============================================================================
  networking = {
    hostName = "@HOSTNAME@";
    networkmanager.enable = true;

    # Firewall enabled by default with minimal ports
    firewall = {
      enable = true;
      allowedTCPPorts = [
        3000  # Gitea HTTP interface
        2222  # Gitea built-in SSH server
        # Add ports only when needed:
        # 8000  # AIDB API
        # 5432  # PostgreSQL
      ];
      # Default: Block all incoming, allow all outgoing
      # Explicitly log rejected packets for security monitoring
      logRefusedConnections = lib.mkDefault false;  # Set true for debugging
    };
  };

  # ============================================================================
  # Locale & Time (User-configured during setup)
  # ============================================================================
  time.timeZone = "@SELECTED_TIMEZONE@";  # Timezone selected during installation
  i18n.defaultLocale = lib.mkDefault "@CURRENT_LOCALE@";  # Auto-detected locale

  # Console configuration (TTY settings)
  console = {
    font = "Lat2-Terminus16";
    keyMap = lib.mkDefault "us";  # Keyboard layout for console
    # useXkbConfig = true;  # Uncomment to use X11 keymap settings in console
  };

  # ============================================================================
  # Users (Secure configuration)
  # ============================================================================

  # Allow users to change their passwords with passwd command
  # Set to false for fully declarative (passwords only from config)
  users.mutableUsers = @USERS_MUTABLE@;

  users.users."@USER@" = {
    isNormalUser = true;
    description = "@USER@";

    # Password configuration (migrated from existing system or preserved automatically)
@USER_PASSWORD_BLOCK@

    # Minimal groups: only what's needed
    extraGroups = [
      "networkmanager"  # Network configuration
      "wheel"           # Sudo access
      "podman"          # Rootless containers
      "video"           # Hardware video acceleration
      "audio"           # Audio device access
      "input"           # Input device access (for Wayland)
    ];
    # Note: "docker" group removed - use podman's dockerCompat instead
    shell = pkgs.zsh;

    # Optional: Auto-login (DISABLED by default for security)
    # Uncomment to enable auto-login without password prompt
    # WARNING: Only use on single-user systems with physical security
    # autoSubUidGidRange = true;  # For rootless podman user namespaces
  };

  # Enable ZSH system-wide
  programs.zsh.enable = true;

  # ============================================================================
  # Home Manager
  # ============================================================================

  # Home Manager integration is provided by the generated flake (see flake.nix)
  # The flake adds home-manager.nixosModules.home-manager and imports ./home.nix

  # ============================================================================
  # Nix Configuration (Modern settings)
  # ============================================================================
  nix = {
    settings = {
      # Modern features
      experimental-features = [ "nix-command" "flakes" ];

      # Performance & security
      auto-optimise-store = true;
      trusted-users = [ "root" "@wheel" ];

      # Security: Restrict nix-daemon network access
      allowed-users = [ "@wheel" ];
    };

    # Automatic garbage collection
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };

    # Optimize store on every build
    optimise = {
      automatic = true;
      dates = [ "weekly" ];
    };
  };

  nixpkgs.config.allowUnfree = true;

  # ============================================================================
  # AIDB: Podman Virtualization (Rootless, secure containers)
  # ============================================================================
  # Modern NixOS 25.05+ container configuration
  virtualisation = {
    containers.enable = true;

    podman = {
      enable = true;

      # Docker CLI compatibility (no docker daemon)
      dockerCompat = true;

      # Enable Podman socket for podman-compose and docker-compose
      dockerSocket.enable = true;

      # Default network DNS for container name resolution
      defaultNetwork.settings.dns_enabled = true;

      # Automatic cleanup of unused images/containers
      autoPrune = {
        enable = true;
        dates = "weekly";
        flags = [ "--all" ];  # Remove all unused images, not just dangling
      };
    };
  };

  # ========================================================================
  # Local AI Runtime (Hugging Face & Ollama)
  # ========================================================================

  services.ollama = lib.mkIf (pkgs ? ollama) {
    enable = true;
    package = pkgs.ollama;
  };

  systemd.services.ollama = lib.mkIf (pkgs ? ollama) {
    environment = {
      HF_HOME = huggingfaceDataDir;
      HUGGINGFACE_HUB_CACHE = huggingfaceCacheDir;
      TRANSFORMERS_CACHE = huggingfaceCacheDir;
    };
  };

  systemd.services.huggingface-tgi = {
    description = "Hugging Face Text Generation Inference";
    documentation = [
      "https://huggingface.co/docs/text-generation-inference/en/index"
      "https://search.nixos.org/options?channel=25.05&show=systemd.services"
    ];
    wantedBy = [ "multi-user.target" ];
    wants = [ "network-online.target" "podman.service" "podman.socket" ];
    after = [ "network-online.target" "podman.service" "podman.socket" ];
    restartTriggers = [ huggingfaceStartScript huggingfacePrepScript huggingfaceStopScript ];
    unitConfig = {
      StartLimitBurst = 3;
      StartLimitIntervalSec = 300;
      ConditionPathExists = huggingfaceTokenSource;
    };
    serviceConfig = {
      Type = "simple";
      ExecStartPre = [ huggingfacePrepScript ];
      ExecStart = huggingfaceStartScript;
      ExecStop = huggingfaceStopScript;
      Restart = "on-failure";
      RestartSec = 15;
      TimeoutStartSec = 600;
      TimeoutStopSec = 90;
      WorkingDirectory = "%S/${huggingfaceStateDirName}";
      StateDirectory = huggingfaceStateDirName;
    };
    environment = {
      HF_HOME = "%S/${huggingfaceStateDirName}";
      HUGGINGFACE_HUB_CACHE = "%S/${huggingfaceStateDirName}/cache";
      TRANSFORMERS_CACHE = "%S/${huggingfaceStateDirName}/cache";
    };
  };

  # ========================================================================
  # Self-hosted Git Service (Gitea)
  # ========================================================================

  services.gitea = {
    enable = true;
    appName = "AIDB Gitea";
    package = pkgs.gitea;
    user = "gitea";
    group = "gitea";
    stateDir = giteaStateDir;
    database = {
      type = "sqlite3";
      path = giteaDatabasePath;
    };
    repositoryRoot = giteaRepositoriesDir;
    rootUrl = giteaRootUrl;
    httpAddress = "0.0.0.0";
    httpPort = giteaHttpPort;
    ssh = {
      enable = true;
      domain = giteaDomain;
      listenAddress = "0.0.0.0";
      port = giteaSshPort;
    };
    lfs = {
      enable = true;
      contentDir = giteaLfsDir;
    };
    disableRegistration = false;
    settings = giteaSharedSettings;
  };

  @GITEA_ADMIN_SERVICE_BLOCK@

  # ============================================================================
  # COSMIC Desktop Environment (Wayland-native)
  # ============================================================================
  # NixOS 25.05+ modern configuration
  # 100% Wayland-native - No X11/XWayland needed for this configuration
  # All applications configured for native Wayland support

  services.desktopManager.cosmic = {
    enable = true;
    @COSMIC_GPU_BLOCK@

    # Optional: XWayland support for legacy X11 applications (DISABLED)
    # Uncomment ONLY if you need to run proprietary X11-only software
    # Examples: Some game launchers, proprietary CAD software, older apps
    # Note: Adds security risk (X11 less secure than Wayland)
    # xwayland.enable = false;

    # Optional: Exclude default COSMIC applications (NixOS 25.11+)
    # COSMIC desktop automatically includes: cosmic-settings, cosmic-notification-daemon,
    # cosmic-files, cosmic-edit, cosmic-terminal, and other core applications
    # Uncomment the section below in NixOS 25.11+ to prevent duplicates in application menu
    #
    # NOTE: This option is NOT available in NixOS 25.05
    # If using 25.05 and experiencing duplicate apps, upgrade to 25.11 or later
    #
    # excludePackages = with pkgs; [
    #   cosmic-settings
    #   cosmic-notification-daemon
    #   cosmic-launcher
    #   cosmic-files
    #   cosmic-edit
    #   cosmic-terminal
    # ];
  };

  services.displayManager = {
    # COSMIC Greeter (Wayland-native login screen)
    cosmic-greeter.enable = true;

    # Optional: Set default desktop session (DISABLED - not needed)
    # Uncomment ONLY if you install multiple desktop environments
    # Ensures COSMIC loads by default instead of others (GNOME, KDE, etc)
    # Since only COSMIC is installed, this setting is redundant
    # defaultSession = "cosmic";

    # Optional: Auto-login to skip password prompt (DISABLED for security)
    # Uncomment to boot directly to desktop without login screen
    # WARNING: Only use on single-user systems with physical security!
    # Bypasses password authentication - creates security risk
    # autoLogin = {
    #   enable = true;
    #   user = "@USER@";
    # };
  };

  # Wayland-specific optimizations and COSMIC configuration
  environment.sessionVariables = {
    # Force Wayland for Qt apps
    QT_QPA_PLATFORM = "wayland";
    # Force Wayland for SDL2 apps
    SDL_VIDEODRIVER = "wayland";
    # Firefox Wayland
    MOZ_ENABLE_WAYLAND = "1";
    # Electron apps (VSCodium, etc)
    NIXOS_OZONE_WL = "1";

    # COSMIC-specific: Enable clipboard functionality
    # Required for cosmic-clipboard to work with wl-clipboard
    COSMIC_DATA_CONTROL_ENABLED = "1";
  };

  # ============================================================================
  # System Packages (System-level only)
  # ============================================================================
  # Note: Development tools (git, vim, etc.) are installed via home-manager
  # This prevents package collisions and allows per-user customization
  #
  # IMPORTANT: COSMIC desktop apps (cosmic-edit, cosmic-files, cosmic-term, etc.)
  # are AUTOMATICALLY included when services.desktopManager.cosmic.enable = true
  # DO NOT add them here - it creates duplicates!
  environment.systemPackages = with pkgs; [
    # COSMIC App Store (not auto-included, needs explicit installation)
    cosmic-store

    # Container tools (system-level for rootless podman)
    podman
    podman-compose
    buildah
    skopeo
    crun
    slirp4netns

    # Hardware detection tools (for GPU detection in deployment script)
    pciutils  # Provides lspci for hardware detection

    # Essential system utilities only
    # All other tools installed via home-manager to prevent collisions
  ];

  # ============================================================================
  # Shell Configuration
  # ============================================================================
  # Add shells to /etc/shells to allow chsh to set them as login shells
  environment.shells = with pkgs; [
    bash
    zsh
  ];

  # ============================================================================
  # Fonts (Required for Cosmic and development)
  # ============================================================================
  fonts.packages = with pkgs; [
    nerd-fonts.meslo-lg
    nerd-fonts.fira-code
    nerd-fonts.jetbrains-mono
    nerd-fonts.hack
    font-awesome
    powerline-fonts
  ];

  # ============================================================================
  # Audio (Modern PipeWire - NixOS 25.05+)
  # ============================================================================
  # PipeWire: Modern, low-latency audio/video routing
  # Replaces PulseAudio and JACK with better Wayland integration

  # Disable legacy audio systems (NixOS 25.05+ uses services.pulseaudio)
  services.pulseaudio.enable = false;

  # Enable real-time audio scheduling (required for low latency)
  security.rtkit.enable = true;

  services.pipewire = {
    enable = true;

    # ALSA support (direct hardware access)
    alsa = {
      enable = true;
      support32Bit = true;  # For 32-bit games/apps
    };

    # PulseAudio compatibility layer
    pulse.enable = true;

    # JACK audio (professional audio production)
    jack.enable = true;

    # WirePlumber: Modern session manager for PipeWire
    wireplumber.enable = true;
  };

  # ============================================================================
  # Printing
  # ============================================================================
  services.printing.enable = true;

  # ============================================================================
  # Flatpak (Required for COSMIC App Store)
  # ============================================================================
  services.flatpak.enable = true;

  # Note: After system rebuild, run this command as your user to add Flathub:
  # flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

  # ============================================================================
  # System Monitoring Tools (GNOME-like Features)
  # ============================================================================
  # Resources: Modern system monitor similar to GNOME Settings
  #   - CPU, GPU, RAM, disk monitoring
  #   - Network statistics
  #   - Sensor readings (temperature, fan speed)
  #   - Process information (like GNOME Task Manager)
  #   - Clean, modern GTK 4 interface with libadwaita
  #
  # Installation: Available via Flatpak home-manager
  #   Uncomment in ~/.config/home-manager/home.nix:
  #   "net.nokyan.Resources"  # System resource monitor
  #
  # Alternative system monitoring services (optional - commented out):

  # GNOME Shell (for extensions like system monitor bar)
  # Uncomment if you want GNOME Shell in addition to COSMIC:
  # services.displayManager.gdm.enable = false;  # Disable if using COSMIC only
  # services.gnome.core-utilities.enable = false;

  # Dbus (Required for many system services and monitor integration)
  services.dbus.enable = true;

  # UPower (Power management and battery monitoring - integrated with monitors)
  services.upower.enable = true;

  # Bluetooth (For wireless device monitoring)
  services.blueman.enable = true;

  # Thermald (Intel thermal management - auto-thermal throttling)
  # Enabled automatically on Intel systems for temperature management
  services.thermald.enable = true;

  # ============================================================================
  # Geolocation Services (For COSMIC auto day/night theme)
  # ============================================================================
  # GeoClue2: Provides geolocation services for automatic timezone/theme
  # Used by COSMIC for:
  # - Automatic day/night theme switching based on sunrise/sunset
  # - Location-aware timezone detection
  # - Weather information (if installed)
  services.geoclue2 = {
    enable = true;
    enableWifi = true;
    
    # Location services can access your geolocation - configure privacy:
    # Allow only specific applications to access location
    geoProviderUrl = "https://api.beacondb.net/v1/geolocate";
    submitData = false;
    appConfig = {  
        # Allow COSMIC Settings to access location for theme switching
        #"cosmic-settings" = {
        #  isAllowed = true;
        #  isSystem = true;
      #};
    };
  };

  # ============================================================================
  # Memory Management & Swap
  # ============================================================================
  # Swap configuration is inherited from hardware-configuration.nix
  # This section adds intelligent swap management and hibernation support

  # Systemd sleep/hibernate configuration
  systemd.sleep.extraConfig = ''
    # Hibernate after 2 hours of suspend (saves battery)
    HibernateDelaySec=2h
  '';

  # Zram: Compressed RAM swap (faster than disk swap)
  # This creates a compressed block device in RAM for swap
  # Auto-configured based on detected RAM: @TOTAL_RAM_GB@GB
  # Strategy: More RAM = less zram needed (diminishing returns)
  zramSwap = {
    enable = true;
    algorithm = "zstd";  # Modern, fast compression (better than lz4/lzo)
    memoryPercent = @ZRAM_PERCENT@;  # Auto-tuned: @ZRAM_PERCENT@% for @TOTAL_RAM_GB@GB RAM
    priority = 10;       # Higher priority than disk swap (use zram first)
  };

  # System memory management tunables
  boot.kernel.sysctl = {
    # Swappiness: How aggressively to swap (0-100)
    # Lower = prefer RAM, Higher = swap more aggressively
    # Default: 60, Recommended for desktop: 10
    "vm.swappiness" = 10;

    # VFS cache pressure: How aggressively to reclaim inode/dentry cache
    # Lower = keep more cache, Higher = reclaim more aggressively
    # Default: 100, Recommended: 50
    "vm.vfs_cache_pressure" = 50;

    # Dirty ratio: Percentage of memory that can be dirty before forced writeback
    # Helps prevent I/O spikes
    "vm.dirty_ratio" = 10;
    "vm.dirty_background_ratio" = 5;
  };

  # ============================================================================
  # Power Management (for hibernation support)
  # ============================================================================
  powerManagement = {
    enable = true;
    # Allow hibernation if swap is configured
    # Requires: swapDevices with sufficient size (>= RAM size)
  };

  # ============================================================================
  # System & Home Manager Version
  # ============================================================================
  system.stateVersion = "@NIXOS_VERSION@";
}
