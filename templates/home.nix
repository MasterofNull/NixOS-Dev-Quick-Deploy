# NixOS Quick Deploy - Home Manager Configuration
# Generated by: nixos-quick-deploy.sh vVERSIONPLACEHOLDER
# Template Hash: HASHPLACEHOLDER
# This hash is used to detect when the template changes
# If you edit this file manually, your edits will be preserved
# until the template itself changes (new packages added to script)

{ config, pkgs, nix-flatpak, ... }:

let
  lib = pkgs.lib;
  giteaFlatpakAppId = "io.gitea.Gitea";
  giteaFlatpakConfigDir = ".var/app/${giteaFlatpakAppId}/config/gitea";
  giteaFlatpakDataDir = ".var/app/${giteaFlatpakAppId}/data/gitea";
  giteaNativeConfigDir = ".config/gitea";
  giteaNativeDataDir = ".local/share/gitea";
  giteaAiConfigFile = "ai-agents.json";
  huggingfaceCacheDir = ".cache/huggingface";
  huggingfaceModelId = "meta-llama/Meta-Llama-3-8B-Instruct";
  huggingfaceTgiEndpoint = "http://127.0.0.1:8080";
  ollamaHost = "http://127.0.0.1:11434";
  openWebUiPort = 8081;
  openWebUiUrl = "http://127.0.0.1:${toString openWebUiPort}";
  openWebUiDataDir = ".local/share/open-webui";
  huggingfaceReadme = ''
    Hugging Face configuration lives here.

    • Store your personal access token in the file "token" within this directory (never commit it).
    • CLI caches and credentials are isolated from Git repositories.
    • The hf-model-sync helper will reuse this token and cache when downloading models.
  '';
  openWebUiReadme = ''
    Persistent storage for Open WebUI when launched with the open-webui-run helper.

Actions
Projects
Wiki
Security
Insights

    Settings

Auto-detect timezone and preserve existing user credentials #8
Open
MasterofNull wants to merge 1 commit into main from codex/refactor-script-to-improve-file-writing-oaj3r1
+2,590 −1,594

    • All chat history, uploads, and custom prompts are written here.
    • The helper binds this directory into the container at /app/backend/data.
    • Remove this directory to reset the Open WebUI state safely.
  '';
  giteaSharedAppIni = ''
    [server]
    PROTOCOL = http
    DOMAIN = localhost
    HTTP_ADDR = 127.0.0.1
    HTTP_PORT = 3000
    ROOT_URL = http://localhost:3000/
    STATIC_ROOT_PATH = %(APP_DATA_PATH)s/public
    ENABLE_GZIP = true
    LFS_START_SERVER = true
    LFS_JWT_SECRET = auto-generated-change-me
    DISABLE_SSH = false
    SSH_DOMAIN = localhost
    SSH_PORT = 2222
    SSH_LISTEN_PORT = 2222
    START_SSH_SERVER = true

    [database]
    DB_TYPE = sqlite3
    PATH = %(GITEA_WORK_DIR)s/gitea.db
    LOG_SQL = false

    [repository]
    ROOT = %(GITEA_WORK_DIR)s/repositories
    FORCE_PRIVATE = false

    [packages]
    ENABLED = true

    [actions]
    ENABLED = true
    DEFAULT_ACTIONS_URL = https://gitea.com

    [indexer]
    ISSUE_INDEXER_TYPE = bleve
    ISSUE_INDEXER_PATH = %(GITEA_WORK_DIR)s/indexers/issues.bleve
    REPO_INDEXER_ENABLED = true
    REPO_INDEXER_PATH = %(GITEA_WORK_DIR)s/indexers/repos.bleve

    [ui]
    DEFAULT_THEME = arc-green
    THEMES = arc-green,auto,github
    DEFAULT_SHOW_FULL_NAME = true

    [service]
    REGISTER_EMAIL_CONFIRM = false
    DISABLE_REGISTRATION = false
    REQUIRE_SIGNIN_VIEW = false
    ENABLE_NOTIFY_MAIL = false

    [security]
    INSTALL_LOCK = true
    PASSWORD_HASH_ALGO = argon2
    SECRET_KEY = change-me-secret-key

    [oauth2]
    JWT_SECRET = change-me-oauth-secret

    [log]
    MODE = console
    LEVEL = info

    [lfs]
    STORAGE_TYPE = local
    PATH = %(GITEA_WORK_DIR)s/lfs
  '';
  giteaAiIntegrations = ''
    {
Actions
Projects
Wiki
Security
Insights

    Settings

Auto-detect timezone and preserve existing user credentials #8
Open
MasterofNull wants to merge 1 commit into main from codex/refactor-script-to-improve-file-writing-oaj3r1
+2,590 −1,594

      "agents": [
        {
          "name": "aider-openai",
          "command": [
            "aider",
            "--model",
            "gpt-4o-mini",
            "--repo",
            "%REPO_PATH%",
            "--no-auto-commits"
          ],
          "environment": {
            "OPENAI_API_KEY": "ENV[OPENAI_API_KEY]",
            "AIDER_LOG_DIR": "%HOME%/.local/share/aider/logs"
          },
          "description": "Use aider to provide AI pair-programming suggestions for the current Gitea repository."
        },
        {
          "name": "tea-commit-summarizer",
          "command": [
            "tea",
            "ai",
            "summarize",
            "--repo",
            "%REPO_PATH%",
            "--model",
            "gpt-4o-mini"
          ],
          "environment": {
            "TEA_TOKEN": "ENV[TEA_TOKEN]"
          },
          "description": "Generate commit summaries with the Tea CLI leveraging configured AI providers."
        }
      ],
      "notes": "Populate the referenced environment variables with the appropriate API tokens to enable AI workflows."
    }
  '';
in

{
  # nix-flatpak module is imported in flake.nix as a proper home-manager module
  # This enables declarative Flatpak management through services.flatpak configuration
  # No manual import needed here - the module is loaded by home-manager automatically

  imports = [
    nix-flatpak.homeManagerModules.nix-flatpak
  ];
Actions
Projects
Wiki
Security
Insights

    Settings

Auto-detect timezone and preserve existing user credentials #8
Open
MasterofNull wants to merge 1 commit into main from codex/refactor-script-to-improve-file-writing-oaj3r1
+2,590 −1,594


  home.username = "HOMEUSERNAME";
  home.homeDirectory = "HOMEDIR";
  home.stateVersion = "STATEVERSION_PLACEHOLDER";  # Auto-detected from home-manager channel

  programs.home-manager.enable = true;
  nixpkgs.config.allowUnfree = true;

  home.packages =
    let
      pythonAiEnv =
        pkgs.python311.withPackages (ps:
          let
            base = with ps; [
              pip
              setuptools
              wheel
              accelerate
              datasets
              diffusers
              peft
              safetensors
              sentencepiece
              tokenizers
              transformers
              evaluate
              gradio
              jupyterlab
              ipykernel
              pandas
              scikit-learn
              black
              ipython
              ipywidgets
            ];
            extras =
              lib.optionals (ps ? bitsandbytes) [ ps.bitsandbytes ]
              ++ lib.optionals (ps ? torch) [ ps.torch ]
              ++ lib.optionals (ps ? torchaudio) [ ps.torchaudio ]
              ++ lib.optionals (ps ? torchvision) [ ps.torchvision ];
          in
            base ++ extras
        );
      aiCommandLinePackages =
        lib.optionals (pkgs ? ollama) [ pkgs.ollama ];
      basePackages = with pkgs; [
        # ========================================================================
        # AIDB v4.0 Requirements (CRITICAL - Must be installed)
        # ========================================================================

        podman                  # Container runtime for AIDB
        podman-compose          # Docker-compose compatibility
        sqlite                  # Tier 1 Guardian database
        openssl                 # Cryptographic operations
        bc                      # Basic calculator
        inotify-tools           # File watching for Guardian

        # ========================================================================
        # Core NixOS Development Tools
        # ========================================================================

        # Nix tools
        nix-tree                # Visualize Nix dependencies
        nix-index               # Index Nix packages for fast searching
        nix-prefetch-git        # Prefetch git repositories
        nixpkgs-fmt             # Nix code formatter
        alejandra               # Alternative Nix formatter
        statix                  # Linter for Nix
        deadnix                 # Find dead Nix code
        nix-output-monitor      # Better build output
        nix-du                  # Disk usage for Nix store
        nixpkgs-review          # Review nixpkgs PRs
        nix-diff                # Compare Nix derivations

        # ========================================================================
        # Development Tools
        # ========================================================================

        # Version control
        # Note: git installed via programs.git below (prevents collision)
        git-crypt               # Transparent file encryption in git
        tig                     # Text-mode interface for git
        lazygit                 # Terminal UI for git commands
        git-lfs                 # Large file storage (required for Hugging Face repos)

        # Text editors
        # Note: vim installed via programs.vim below (prevents collision)
        neovim                  # Modern Vim fork with async support
        # Note: vscodium installed via programs.vscode below

        # Web browsers are now installed via Flatpak for better sandboxing:
        # Firefox: "org.mozilla.firefox" in services.flatpak.packages
        # Chromium: Available as "com.google.Chrome" if needed
        # (Both still available in home.packages comments if NixOS versions preferred)

        # Modern CLI tools
        ripgrep                 # Fast recursive grep (rg)
        ripgrep-all             # Ripgrep with PDF, archive support
        fd                      # Fast alternative to find
        fzf                     # Fuzzy finder for command line
        bat                     # Cat clone with syntax highlighting
        eza                     # Modern replacement for ls
        jq                      # JSON processor
        yq                      # YAML processor
        choose                  # Human-friendly cut/awk alternative
        du-dust                 # Intuitive disk usage (du)
        duf                     # Disk usage/free utility (df)
        broot                   # Tree view with navigation
        dog                     # DNS lookup utility (dig)
        shellcheck              # Shell script static analysis

        # Terminal tools
        # Note: alacritty installed via programs.alacritty below (prevents collision)
        tmux                    # Terminal multiplexer
        screen                  # Terminal session manager
        mosh                    # Mobile shell (SSH alternative)
        asciinema               # Terminal session recorder

        # File management
        ranger                  # Console file manager with VI bindings
        dos2unix                # Convert text file line endings
        unrar                   # Extract RAR archives
        p7zip                   # 7-Zip file archiver
        file                    # File type identification
        rsync                   # Fast incremental file transfer
        rclone                  # Rsync for cloud storage

        # Network tools
        wget                    # Network downloader
        curl                    # Transfer data with URLs
        netcat-gnu              # Network utility for TCP/UDP
        socat                   # Multipurpose relay (SOcket CAT)
        mtr                     # Network diagnostic tool (traceroute/ping)
        nmap                    # Network exploration and security scanner

        # System tools
        htop                    # Interactive process viewer
        btop                    # Resource monitor with modern UI
        tree                    # Display directory tree structure
        unzip                   # Extract ZIP archives
        zip                     # Create ZIP archives
        bc                      # Arbitrary precision calculator
        efibootmgr              # Modify EFI Boot Manager variables

        # ========================================================================
        # Programming Languages & Tools
Actions
Projects
Wiki
Security
Insights

    Settings

Auto-detect timezone and preserve existing user credentials #8
Open
MasterofNull wants to merge 1 commit into main from codex/refactor-script-to-improve-file-writing-oaj3r1
+2,590 −1,594

        # ========================================================================

        # Python (REQUIRED for AIDB and AI model tooling)
        pythonAiEnv

        # Additional languages
        go                      # Go programming language
        rustc                   # Rust compiler
        cargo                   # Rust package manager
        ruby                    # Ruby programming language

        # Development utilities
        gnumake                 # GNU Make build automation
        gcc                     # GNU C/C++ compiler
        nodejs_22               # Node.js JavaScript runtime v22

        # ========================================================================
        # Virtualization & Emulation
        # ========================================================================

        qemu            # Machine emulator and virtualizer
        virtiofsd       # VirtIO filesystem daemon

        # ========================================================================
        # Desktop Environment - Cosmic (Rust-based modern desktop)
        # ========================================================================

        #cosmic-edit             # Cosmic text editor
        #cosmic-files            # Cosmic file manager
        #cosmic-term             # Cosmic terminal

        # ========================================================================
        # ZSH Configuration
        # ========================================================================

        # Note: zsh installed via programs.zsh below (prevents collision)
        zsh-syntax-highlighting # Command syntax highlighting
        zsh-autosuggestions     # Command suggestions from history
        zsh-completions         # Additional completion definitions
        zsh-powerlevel10k       # Powerlevel10k theme
        grc                     # Generic colorizer for commands
        pay-respects            # Modern replacement for 'fuck'

        # ========================================================================
        # Fonts (Required for Powerlevel10k)
        # ========================================================================

        nerd-fonts.meslo-lg     # MesloLGS Nerd Font (recommended for p10k)
        nerd-fonts.fira-code    # Fira Code Nerd Font with ligatures
        nerd-fonts.jetbrains-mono # JetBrains Mono Nerd Font
        nerd-fonts.hack         # Hack Nerd Font
        font-awesome            # Font Awesome icon font
        powerline-fonts         # Powerline-patched fonts

        # ========================================================================
        # Text Processing
        # ========================================================================

        tldr                    # Simplified man pages
        cht-sh                  # Community cheat sheets
        pandoc                  # Universal document converter

        # ========================================================================
        # Utilities
        # ========================================================================

        mcfly           # Command history search
        navi            # Interactive cheatsheet
        starship        # Shell prompt
        hexedit         # Hex editor
        qrencode        # QR code generator
      ];
      giteaFallbackPackages =
        lib.optionals (!config.services.flatpak.enable) [
          pkgs.gitea             # Native deployment when Flatpak is unavailable
        ];
      giteaDevAiPackages =
        let
          aiderPackage =
            if pkgs ? aider-chat then
              [ pkgs.aider-chat ]
            else if pkgs ? aider then
              [ pkgs.aider ]
            else
              [ ];
        in
        [
          pkgs.tea                     # Official Gitea CLI for automation and AI workflows
          pkgs.python311Packages.openai # Python SDK for OpenAI-compatible AI providers
        ]
        ++ aiderPackage;
    in
    basePackages ++ giteaFallbackPackages ++ giteaDevAiPackages ++ aiCommandLinePackages;

  # ========================================================================
  # ZSH Configuration
  # ========================================================================

  programs.zsh = {
    enable = true;
    enableCompletion = true;
    syntaxHighlighting.enable = true;
    autosuggestions.enable = false;

    history = {
      size = 100000;
      path = "${config.xdg.dataHome}/zsh/history";
    };

    shellAliases = {
      # Basic modern replacements
      ll = "eza -l --icons";
      la = "eza -la --icons";
      lt = "eza --tree --icons";
      cat = "bat";
      du = "dust";
      df = "duf";

      # NixOS specific
      nrs = "sudo nixos-rebuild switch";
      nrt = "sudo nixos-rebuild test";
      nrb = "sudo nixos-rebuild boot";
      hms = "home-manager switch";
      nfu = "nix flake update";
      nfc = "nix flake check";
      nfb = "nix build";
      nfd = "nix develop";

      # Nix development
      nix-dev = "nix develop -c $SHELL";
      nix-search = "nix search nixpkgs";
      nix-shell-pure = "nix-shell --pure";

      # Git shortcuts
      gs = "git status";
      ga = "git add";
      gc = "git commit";
      gp = "git push";
      gl = "git pull";
      gd = "git diff";
      gco = "git checkout";
      gb = "git branch";

      # Lazy tools
      lg = "lazygit";
      hf-sync = "hf-model-sync";
      hf-start = "sudo systemctl start huggingface-tgi.service";
      hf-stop = "sudo systemctl stop huggingface-tgi.service";
      hf-restart = "sudo systemctl restart huggingface-tgi.service";
      hf-logs = "journalctl -u huggingface-tgi.service -f";
      open-webui-up = "open-webui-run";
      open-webui-down = "open-webui-stop";
      ollama-list = "ollama list";

      # Find shortcuts
      ff = "fd";
      rg = "rg --smart-case";
    };

    # NixOS 25.11+: Use 'initContent' instead of 'initExtra'
    initContent = ''
      # Powerlevel10k First-Run Setup Wizard
      P10K_MARKER="$HOME/.config/p10k/.configured"
      P10K_WIZARD="$HOME/.local/bin/p10k-setup-wizard.sh"

      # Run setup wizard on first shell launch
      if [[ ! -f "$P10K_MARKER" && -f "$P10K_WIZARD" ]]; then
        echo ""
        echo "╔══════════════════════════════════════════════════════╗"
        echo "║  Welcome to your new ZSH setup!                     ║"
        echo "║  Let's configure Powerlevel10k...                   ║"
        echo "╚══════════════════════════════════════════════════════╝"
        echo ""
        "$P10K_WIZARD"
        echo ""
        echo "Please restart your shell to see the changes: exec zsh"
        return
      fi

      # Powerlevel10k instant prompt
      if [[ -r "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh" ]]; then
        source "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh"
      fi

      # Load Powerlevel10k theme
      source ${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme

      # P10k configuration (dynamic - adapts to user preferences)
      [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

      # Enhanced command history with mcfly
      if command -v mcfly &> /dev/null; then
        eval "$(mcfly init zsh)"
      fi

      # FZF configuration
      export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
      export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
      export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

      # Nix-specific environment
      export NIX_PATH=$HOME/.nix-defexpr/channels''${NIX_PATH:+:}$NIX_PATH

      # Better error messages
      export NIXPKGS_ALLOW_UNFREE=1
    '';
  };

  # ========================================================================
  # Git Configuration
  # ========================================================================
  # Using GitHub no-reply email (username@users.noreply.github.com) to:
  # - Protect your privacy (email not exposed in commits)
  # - Comply with GitHub email privacy settings
  # - Prevent push rejections due to GH007 errors

  programs.git = {
    enable = true;
    package = pkgs.git;

    # Git user configuration - set these manually after installation:
    # git config --global user.name "Your Name"
    # git config --global user.email "you@example.com"

    extraConfig = {
      init.defaultBranch = "main";
      pull.rebase = false;
      core.editor = "DEFAULTEDITOR";
    };

    aliases = {
      st = "status";
      co = "checkout";
      br = "branch";
      ci = "commit";
      unstage = "reset HEAD --";
      last = "log -1 HEAD";
      visual = "log --oneline --graph --decorate --all";
    };
  };

  # ========================================================================
  # Vim Configuration (minimal)
  # ========================================================================

  programs.vim = {
    enable = true;
    defaultEditor = false;  # Use DEFAULTEDITOR instead

    settings = {
      number = true;
      relativenumber = true;
      expandtab = true;
      tabstop = 2;
      shiftwidth = 2;
    };
  };

  # ========================================================================
  # VSCodium Configuration (Declarative)
  # ========================================================================

  programs.vscode = {
    enable = true;
    package = pkgs.vscodium;

    # NixOS 25.11: Use profiles.default for extensions and settings
    profiles.default = {
      # Extensions installed declaratively
      extensions = with pkgs.vscode-extensions; [
        # Nix language support
        jnoortheen.nix-ide
        arrterian.nix-env-selector

        # Git tools
        eamodio.gitlens

        # General development
        editorconfig.editorconfig
        esbenp.prettier-vscode
      ];

      # VSCodium settings (declarative)
      # Note: Claude Code paths will be added by bash script (dynamic)
      userSettings = {
      # Editor Configuration
      "editor.fontSize" = 14;
      "editor.fontFamily" = "'Fira Code', 'Droid Sans Mono', 'monospace'";
      "editor.fontLigatures" = true;
      "editor.formatOnSave" = true;
      "editor.formatOnPaste" = true;
      "editor.tabSize" = 2;
      "editor.insertSpaces" = true;
      "editor.detectIndentation" = true;
      "editor.minimap.enabled" = true;
      "editor.bracketPairColorization.enabled" = true;
      "editor.guides.bracketPairs" = true;

      # Nix-specific settings
      "nix.enableLanguageServer" = true;
      "nix.serverPath" = "nil";
      "nix.formatterPath" = "nixpkgs-fmt";
      "[nix]" = {
        "editor.defaultFormatter" = "jnoortheen.nix-ide";
        "editor.tabSize" = 2;
      };

      # Python & Jupyter integration
      "python.defaultInterpreterPath" = "${pythonAiEnv}/bin/python3";
      "python.terminal.activateEnvironment" = true;
      "python.languageServer" = "Pylance";
      "python.analysis.typeCheckingMode" = "basic";
      "python.analysis.autoImportCompletions" = true;
      "python.formatting.provider" = "black";
      "python.testing.pytestEnabled" = true;
      "python.testing.unittestEnabled" = false;
      "python.dataScience.jupyterServerURI" = "local";
      "jupyter.askForKernelRestart" = false;
      "jupyter.jupyterServerType" = "local";
      "jupyter.notebookFileRoot" = "${config.home.homeDirectory}";
      "[python]" = {
        "editor.defaultFormatter" = "ms-python.black-formatter";
        "editor.formatOnSave" = true;
      };
      "[jupyter]" = {
        "editor.defaultFormatter" = "ms-toolsai.jupyter";
      };

      # Local AI endpoints
      "huggingface.endpoint" = "${huggingfaceTgiEndpoint}";
      "huggingface.defaultModel" = "${huggingfaceModelId}";
      "huggingface.telemetry.enableTelemetry" = false;
      "continue.defaultModel" = "Ollama (Llama 3)";
      "continue.enableTelemetry" = false;
      "continue.models" = [
        {
          title = "Ollama (Llama 3)";
          provider = "ollama";
          model = "llama3";
          baseUrl = ollamaHost;
        }
        {
          title = "Hugging Face TGI";
          provider = "openai";
          model = huggingfaceModelId;
          baseUrl = "${huggingfaceTgiEndpoint}/v1";
        }
      ];

      # Git configuration
      "git.enableSmartCommit" = true;
      "git.autofetch" = true;
      "gitlens.codeLens.enabled" = true;

      # Terminal
      "terminal.integrated.defaultProfile.linux" = "zsh";
      "terminal.integrated.fontSize" = 13;

      # Theme
      "workbench.colorTheme" = "Default Dark Modern";

      # File associations
      "files.associations" = {
        "*.nix" = "nix";
        "flake.lock" = "json";
      };

      # Miscellaneous
      "files.autoSave" = "afterDelay";
      "files.autoSaveDelay" = 1000;
      "explorer.confirmDelete" = false;
      "explorer.confirmDragAndDrop" = false;
      };
    };
  };

  # ========================================================================
  # Alacritty Terminal Configuration
  # ========================================================================

  programs.alacritty = {
    enable = true;
    settings = {
      window = {
        opacity = 0.95;
        padding = {
          x = 10;
          y = 10;
        };
      };
      font = {
        size = 11.0;
        normal = {
          family = "MesloLGS NF";
        };
      };
      colors = {
        primary = {
          background = "0x1e1e1e";
          foreground = "0xd4d4d4";
        };
      };
    };
  };

  # ========================================================================
  # Session Variables
  # ========================================================================

  home.sessionVariables =
    {
      EDITOR = "DEFAULTEDITOR";
      VISUAL = "DEFAULTEDITOR";
      NIXPKGS_ALLOW_UNFREE = "1";
      AIDER_DEFAULT_MODEL = "gpt-4o-mini";
      AIDER_LOG_DIR = "$HOME/.local/share/aider/logs";
      TEA_AI_MODEL = "gpt-4o-mini";
      HF_HOME = "$HOME/${huggingfaceCacheDir}";
      HUGGINGFACE_HUB_CACHE = "$HOME/${huggingfaceCacheDir}";
      TRANSFORMERS_CACHE = "$HOME/${huggingfaceCacheDir}";
      HUGGINGFACE_TGI_ENDPOINT = "${huggingfaceTgiEndpoint}";
      HUGGINGFACE_MODEL_ID = "${huggingfaceModelId}";
      HUGGINGFACE_TOKEN_PATH = "$HOME/.config/huggingface/token";
      HF_HUB_ENABLE_HF_TRANSFER = "1";
      OLLAMA_HOST = "${ollamaHost}";
      OPEN_WEBUI_URL = "${openWebUiUrl}";
    }
    // lib.optionalAttrs config.services.flatpak.enable {
      GITEA_WORK_DIR = "$HOME/${giteaFlatpakDataDir}";
      GITEA_CUSTOM = "$HOME/${giteaFlatpakConfigDir}";
    }
    // lib.optionalAttrs (!config.services.flatpak.enable) {
      GITEA_WORK_DIR = "$HOME/${giteaNativeDataDir}";
      GITEA_CUSTOM = "$HOME/${giteaNativeConfigDir}";
    };

  # ========================================================================
  # Home Files
  # ========================================================================

  home.file =
    {
    # Create local bin directory
    ".local/bin/.keep".text = "";

    # P10k Setup Wizard
    ".local/bin/p10k-setup-wizard.sh" = {
      source = ./p10k-setup-wizard.sh;
      executable = true;
    };

    # Launcher for the Gitea editor that prefers Flatpak but falls back to native binaries
    ".local/bin/gitea-editor" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        if command -v flatpak >/dev/null 2>&1 && flatpak info ${giteaFlatpakAppId} >/dev/null 2>&1; then
          exec flatpak run ${giteaFlatpakAppId} "$@"
        elif command -v gitea >/dev/null 2>&1; then
          exec gitea "$@"
        elif command -v tea >/dev/null 2>&1; then
          exec tea "$@"
        else
          echo "error: gitea editor is not installed. Install via Flatpak or enable the native package." >&2
          exit 127
        fi
      '';
      executable = true;
    };

    # Helper to bridge local repositories with aider for AI-driven workflows
    ".local/bin/gitea-ai-assistant" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        usage() {
          echo "Usage: gitea-ai-assistant <repository-path> [-- <aider-args>...]" >&2
          exit 1
        }

        if [[ $# -lt 1 ]]; then
          usage
        fi

        repo_path="$1"
        shift

        if [[ "$repo_path" == "--" ]]; then
          usage
        fi

        if [[ ! -d "$repo_path/.git" ]]; then
          echo "error: $repo_path is not a git repository" >&2
          exit 2
        fi

        repo_path="$(realpath "$repo_path")"

        if [[ $# -gt 0 && "$1" == "--" ]]; then
          shift
        fi

        log_dir="$AIDER_LOG_DIR"
        if [[ -z "$log_dir" ]]; then
          log_dir="$HOME/.local/share/aider/logs"
        fi
Actions
Projects
Wiki
Security
Insights

    Settings

Auto-detect timezone and preserve existing user credentials #8
Open
MasterofNull wants to merge 1 commit into main from codex/refactor-script-to-improve-file-writing-oaj3r1
+2,590 −1,594

        mkdir -p "$log_dir"

        model="$AIDER_DEFAULT_MODEL"
        if [[ -z "$model" ]]; then
          model="gpt-4o-mini"
        fi

        exec aider --model "$model" --repo "$repo_path" "$@"
      '';
      executable = true;
    };

    # Hugging Face configuration and cache keepers
    ".config/huggingface/.keep".text = "";
    ".config/huggingface/README".text = huggingfaceReadme;
    "${huggingfaceCacheDir}/.keep".text = "";
    "${openWebUiDataDir}/.keep".text = "";
    "${openWebUiDataDir}/README".text = openWebUiReadme;

    # Helper to sync Hugging Face models into the local cache
    ".local/bin/hf-model-sync" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        if [[ $# -lt 1 ]]; then
          echo "Usage: hf-model-sync <model-id> [-- <extra-args>]" >&2
          exit 1
        fi

        model="$1"
        shift

        cache_root="''${HF_HOME:-$HOME/${huggingfaceCacheDir}}"
        mkdir -p "''${cache_root}/models"

        exec ${pythonAiEnv}/bin/huggingface-cli download "''${model}" "$@" \
          --local-dir "''${cache_root}/models/''${model}" \
          --cache-dir "''${cache_root}"
      '';
      executable = true;
    };

    # Manage the systemd Hugging Face Text Generation Inference service
    ".local/bin/hf-tgi" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        usage() {
          echo "Usage: hf-tgi {start|stop|restart|status|logs} [journalctl-args]" >&2
          exit 1
        }

        [[ $# -gt 0 ]] || usage

        case "$1" in
          start|stop|restart)
            exec sudo systemctl "$1" huggingface-tgi.service
            ;;
          status)
            exec systemctl status huggingface-tgi.service
            ;;
          logs)
            shift
            exec journalctl -u huggingface-tgi.service "$@"
            ;;
          *)
            usage
            ;;
        esac
      '';
      executable = true;
    };

    # Launch Open WebUI via Podman for local AI experimentation
    ".local/bin/open-webui-run" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        container_name="''${OPEN_WEBUI_CONTAINER_NAME:-open-webui-dev}"
        image="''${OPEN_WEBUI_IMAGE:-ghcr.io/open-webui/open-webui:latest}"
        port="''${OPEN_WEBUI_PORT:-${toString openWebUiPort}}"
        data_dir="''${OPEN_WEBUI_DATA_DIR:-$HOME/${openWebUiDataDir}}"

        mkdir -p "''${data_dir}"

        if ${pkgs.podman}/bin/podman ps --format '{{.Names}}' | grep -q "^''${container_name}$"; then
          echo "Open WebUI container '""''${container_name}""' is already running" >&2
          exit 0
        fi

        exec ${pkgs.podman}/bin/podman run --rm \
          --name "''${container_name}" \
          -p "''${port}:8080" \
          -v "''${data_dir}:/app/backend/data" \
          -e "OLLAMA_BASE_URL=${ollamaHost}" \
          -e "OPENAI_API_BASE=${huggingfaceTgiEndpoint}/v1" \
          -e "HF_HOME=''${HF_HOME:-$HOME/${huggingfaceCacheDir}}" \
          "''${image}"
      '';
      executable = true;
    };

    # Stop the Open WebUI container gracefully
    ".local/bin/open-webui-stop" = {
      text = ''
        #!/usr/bin/env bash
        set -euo pipefail

        container_name="''${OPEN_WEBUI_CONTAINER_NAME:-open-webui-dev}"

        if ${pkgs.podman}/bin/podman ps --format '{{.Names}}' | grep -q "^''${container_name}$"; then
          exec ${pkgs.podman}/bin/podman stop "''${container_name}"
        else
          echo "Open WebUI container '""''${container_name}""' is not running" >&2
          exit 0
        fi
      '';
      executable = true;
    };

    # Default configuration for aider so it respects repository structure
    ".config/aider/config.toml".text = ''
      # Aider configuration tailored for NixOS & Gitea workflows
      [core]
      auto_commits = false
      detect_language = true
      use_git = true

      [files]
      include = ["flake.nix", "home.nix", "configuration.nix", "**/*.nix", "**/*.md"]

      [editor]
      command = "DEFAULTEDITOR"
    '';

    # Tea CLI configuration pointing to the generated AI agent catalog
    ".config/tea/config.yml".text = ''
      default:
        host: http://localhost:3000
        user: gitea-admin

      ai:
        model: gpt-4o-mini
        agent_catalog: "$GITEA_CUSTOM/ai-agents.json"
        editor_command:
          - "$HOME/.local/bin/gitea-ai-assistant"
          - "%REPO%"
    '';

    # P10k configuration (dynamic - loads user preferences)
    ".p10k.zsh".text = ''
      # Powerlevel10k configuration for NixOS
      # This config adapts to your preferences set via p10k-setup-wizard
      # To reconfigure: rm ~/.config/p10k/.configured && exec zsh

      # Load user theme preferences (set by p10k-setup-wizard.sh)
      THEME_FILE="$HOME/.config/p10k/theme.sh"
      if [[ -f "$THEME_FILE" ]]; then
        source "$THEME_FILE"
      else
        # Defaults if not configured yet
        export P10K_STYLE="lean"
        export P10K_COLORS="dark"
        export P10K_SHOW_TIME=false
        export P10K_SHOW_OS=true
        export P10K_SHOW_CONTEXT=false
        export P10K_TRANSIENT=true
      fi

      # Enable instant prompt
      if [[ -r "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh" ]]; then
        source "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh"
      fi

      # Build prompt elements based on user preferences
      left_elements=(dir vcs prompt_char)
      [[ "$P10K_SHOW_OS" == "true" ]] && left_elements=(os_icon "''${left_elements[@]}")

      right_elements=(status command_execution_time background_jobs)
      [[ "$P10K_SHOW_TIME" == "true" ]] && right_elements=(time "''${right_elements[@]}")
      [[ "$P10K_SHOW_CONTEXT" == "true" ]] && right_elements+=(context)

      typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=("''${left_elements[@]}")
      typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=("''${right_elements[@]}")

      # Visual style
      typeset -g POWERLEVEL9K_MODE=nerdfont-complete
      typeset -g POWERLEVEL9K_ICON_PADDING=moderate

      # Prompt layout based on style
      case "$P10K_STYLE" in
        lean|pure)
          typeset -g POWERLEVEL9K_PROMPT_ON_NEWLINE=false
          typeset -g POWERLEVEL9K_RPROMPT_ON_NEWLINE=false
          typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
          ;;
        classic|rainbow)
          typeset -g POWERLEVEL9K_PROMPT_ON_NEWLINE=true
          typeset -g POWERLEVEL9K_RPROMPT_ON_NEWLINE=false
          typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
          ;;
      esac

      # Transient prompt
      [[ "$P10K_TRANSIENT" == "true" ]] && typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always

      # Enhanced Color schemes with better contrast
      case "$P10K_COLORS" in
        high-contrast-dark)
          # High contrast bright colors for dark terminals (RECOMMENDED)
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=51           # Bright cyan
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=46     # Bright green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=226 # Bright yellow
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=201 # Bright magenta
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=196 # Bright red
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=231      # White
          typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIINS_FOREGROUND=46
          typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIINS_FOREGROUND=196
          ;;
        custom-high-contrast)
          # Maximum contrast for accessibility
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=15           # White
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=10     # Bright green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=11  # Bright yellow
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=13 # Bright magenta
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=9   # Bright red
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=15       # White
          typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIINS_FOREGROUND=10
          typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIINS_FOREGROUND=9
          ;;
        light)
          # High contrast for light backgrounds
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=24
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=28
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=130
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=21
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=124
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=24
          ;;
        solarized)
          # Solarized Dark colors (enhanced)
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=81           # Brighter blue
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=106    # Brighter green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=221 # Brighter yellow
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=125 # Brighter magenta
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=196 # Bright red
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=81
          ;;
        gruvbox)
          # Gruvbox colors (enhanced)
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=214
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=142
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=208
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=175
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=167
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=223
          ;;
        nord)
          # Nord colors (enhanced)
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=111          # Brighter blue
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=150    # Brighter green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=228 # Bright yellow
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=147 # Brighter purple
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=210 # Bright red
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=153
          ;;
        dracula)
          # Dracula colors (enhanced)
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=141
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=121    # Brighter green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=228
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=177 # Brighter pink
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=212
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=183
          ;;
        *)
          # Dark (default) - bright colors
          typeset -g POWERLEVEL9K_DIR_FOREGROUND=51           # Bright cyan
          typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=46     # Bright green
          typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=226 # Bright yellow
          typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=201 # Bright magenta
          typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=196 # Bright red
          typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=231      # White
          ;;
      esac

      # Common settings
      typeset -g POWERLEVEL9K_DIR_SHORTEN_STRATEGY=truncate_to_last
      typeset -g POWERLEVEL9K_DIR_SHORTEN_DIR_LENGTH=3
      typeset -g POWERLEVEL9K_STATUS_OK=false
      typeset -g POWERLEVEL9K_LINUX_NIXOS_ICON='❄️'
    '';
    }
    // lib.optionalAttrs config.services.flatpak.enable {
      "${giteaFlatpakConfigDir}/app.ini".text = giteaSharedAppIni;
      "${giteaFlatpakConfigDir}/${giteaAiConfigFile}".text = giteaAiIntegrations;
      "${giteaFlatpakDataDir}/README".text = ''
        This directory stores repositories, logs, and AI agent state for the Gitea Flatpak deployment.
        It is managed declaratively by Home Manager; manual changes may be overwritten on switch.
      '';
    }
    // lib.optionalAttrs (!config.services.flatpak.enable) {
      "${giteaNativeConfigDir}/app.ini".text = giteaSharedAppIni;
      "${giteaNativeConfigDir}/${giteaAiConfigFile}".text = giteaAiIntegrations;
      "${giteaNativeDataDir}/README".text = ''
        This directory stores repositories, logs, and AI agent state for the native Gitea deployment.
        It is managed declaratively by Home Manager; manual changes may be overwritten on switch.
      '';
    };

  # ========================================================================
  # Gitea Native Service (Fallback when Flatpak is unavailable)
  # ========================================================================

  systemd.user.services =
    lib.optionalAttrs (!config.services.flatpak.enable) {
      "gitea-dev" = {
        Unit = {
          Description = "Gitea development forge (user)";
          After = [ "network.target" ];
        };
        Service = {
          Environment = [
            "GITEA_WORK_DIR=%h/${giteaNativeDataDir}"
            "GITEA_CUSTOM=%h/${giteaNativeConfigDir}"
          ];
          ExecStart = "${pkgs.gitea}/bin/gitea web --config %h/${giteaNativeConfigDir}/app.ini";
          WorkingDirectory = "%h/${giteaNativeDataDir}";
          Restart = "on-failure";
          RestartSec = 3;
        };
        Install = {
          WantedBy = [ "default.target" ];
        };
      };
    };

  # ========================================================================
  # Flatpak Integration - Manual Setup Instructions
  # ========================================================================
  # NOTE: Flatpak is installed at system level via:
  #   services.flatpak.enable = true  (in ~/.config/home-manager/configuration.nix)
  #
  # INSTALLATION INSTRUCTIONS (Run these once after system setup):
  #
  # 1. Add Flathub repository (one-time setup):
  #    flatpak remote-add --if-not-exists flathub \
  #      https://dl.flathub.org/repo/flathub.flatpakrepo
  #
  # 2. Install Flatpak applications (use commands below):
  #    # System Tools
  #    flatpak install -y flathub com.github.flatseal.Flatseal
  #    flatpak install -y flathub org.gnome.FileRoller
  #    flatpak install -y flathub net.nokyan.Resources
  #
  #    # Media Players
  #    flatpak install -y flathub org.videolan.VLC
  #    flatpak install -y flathub io.mpv.Mpv
  #
  #    # Web Browser
  #    flatpak install -y flathub org.mozilla.firefox
  #
  #    # Productivity
  #    flatpak install -y flathub md.obsidian.Obsidian
  #
  # 3. OR: Copy the list below and use this command:
  #    for app in com.github.flatseal.Flatseal org.gnome.FileRoller \
  #                net.nokyan.Resources org.videolan.VLC io.mpv.Mpv \
  #                org.mozilla.firefox md.obsidian.Obsidian; do
  #      flatpak install -y flathub "$app"
  #    done
  #
  # DECLARATIVE FLATPAK APPS (for reference - install manually):
  # ====================================================================
  # System Tools
  # flatpak install -y flathub com.github.flatseal.Flatseal
  # flatpak install -y flathub org.gnome.FileRoller
  # flatpak install -y flathub net.nokyan.Resources
  #
  # Media Players
  # flatpak install -y flathub org.videolan.VLC
  # flatpak install -y flathub io.mpv.Mpv
  #
  # Web Browsers
  # flatpak install -y flathub org.mozilla.firefox
  #
  # Productivity & Office
  # flatpak install -y flathub md.obsidian.Obsidian
  # # flatpak install -y flathub org.libreoffice.LibreOffice
  # # flatpak install -y flathub app.standard-notes.StandardNotes
  # # flatpak install -y flathub org.joplin.Joplin
  #
  # Development & Content Tools (GUI Applications)
  # # flatpak install -y flathub io.github.gitui.gitui
  # # flatpak install -y flathub fr.handbrake.ghb
  # # flatpak install -y flathub org.audacityteam.Audacity
  # # flatpak install -y flathub org.gimp.GIMP
  # # flatpak install -y flathub org.inkscape.Inkscape
  # # flatpak install -y flathub org.pitivi.Pitivi
  # # flatpak install -y flathub org.blender.Blender
  # # flatpak install -y flathub org.darktable.Darktable
  #
  # Additional Web Browsers (If needed)
  # # flatpak install -y flathub com.google.Chrome
  #
  # Internet & Communication (Desktop Apps)
  # # flatpak install -y flathub org.telegram.desktop
  # # flatpak install -y flathub com.slack.Slack
  # # flatpak install -y flathub org.thunderbird.Thunderbird
  # # flatpak install -y flathub io.Riot.Riot
  # # flatpak install -y flathub com.obsproject.Studio
  #
  # Database & Tools (GUI Applications)
  # # flatpak install -y flathub org.dbeaver.DBeaverCommunity
  # # flatpak install -y flathub com.beekeeperstudio.Studio
  # # flatpak install -y flathub com.mongodb.Compass
  #
  # Remote Access & Virtualization (GUI)
  # # flatpak install -y flathub org.remmina.Remmina
  # # flatpak install -y flathub com.freerdp.FreeRDP
  # # flatpak install -y flathub org.virt_manager.virt-manager
  #
  # Security & Privacy Tools (GUI Applications)
  # # flatpak install -y flathub org.gnome.Secrets
  # # flatpak install -y flathub org.keepassxc.KeePassXC
  # # flatpak install -y flathub com.github.Eloston.UngoogledChromium
  # # flatpak install -y flathub com.tutanota.Tutanota
  #
  # Entertainment & Gaming
  # # flatpak install -y flathub com.valvesoftware.Steam
  # # flatpak install -y flathub org.DolphinEmu.dolphin-emu
  # # flatpak install -y flathub net.rpcs3.RPCS3
  # # flatpak install -y flathub org.libretro.RetroArch
  #
  # ====================================================================
  # ALTERNATIVE: Use COSMIC App Store
  # ====================================================================
  # Simply open the COSMIC App Store from your application menu
  # and search for desired applications. Click Install to download
  # from Flathub. This is the most user-friendly method!
  #
  # MANAGE PERMISSIONS:
  # ====================================================================
  # flatpak run com.github.flatseal.Flatseal
  # (or open Flatseal from app menu)
  #
  # Then select app from sidebar and toggle permissions as needed.

  # services.flatpak: Declarative Flatpak management via nix-flatpak
  # When using flakes with nix-flatpak module imported above, this section
  # defines all Flatpak applications declaratively.
  # When nix-flatpak is NOT available (channel-based install), this section
  # is ignored and you can install apps manually via flatpak CLI.
  #
  services.flatpak = {
    enable = true;
    packages = [
      # ====================================================================
      # SYSTEM TOOLS & UTILITIES (Recommended - Essential GUI Tools)
      # ====================================================================
      "com.github.flatseal.Flatseal"        # Flatpak permissions manager GUI
      "org.gnome.FileRoller"                # Archive manager (zip, tar, 7z, rar) - GUI
      "net.nokyan.Resources"                # System monitor (CPU, GPU, RAM, Network) - GUI

      # ====================================================================
      # MEDIA PLAYERS (Desktop Applications)
      # ====================================================================
      "org.videolan.VLC"                    # VLC media player (universal format support)
      "io.mpv.Mpv"                          # MPV video player (modern, lightweight)

      # ====================================================================
      # WEB BROWSERS
      # ====================================================================
      "org.mozilla.firefox"                 # Firefox browser (Flatpak, better sandbox isolation)

      # ====================================================================
      # PRODUCTIVITY & OFFICE (Popular for Work)
      # ====================================================================
      "md.obsidian.Obsidian"                # Note-taking with markdown, vault sync, plugins
      # "org.libreoffice.LibreOffice"         # Full office suite (documents, spreadsheets, presentations)
      # "app.standard-notes.StandardNotes"    # Encrypted note-taking
      # "org.joplin.Joplin"                   # Note-taking with sync (active development)

      # ====================================================================
      # SELF-HOSTED DEVELOPMENT TOOLS
      # ====================================================================
      giteaFlatpakAppId                     # Gitea forge with built-in editor and AI integration hooks

      # ====================================================================
      # DEVELOPMENT & CONTENT TOOLS (GUI Applications)
      # ====================================================================
      # "io.github.gitui.gitui"               # Modern Git client (Rust-based UI)
      # "fr.handbrake.ghb"                    # HandBrake video converter (GUI)
      # "org.audacityteam.Audacity"           # Audio recording & editing (GUI)
      # "org.gimp.GIMP"                       # Image manipulation (Photoshop alternative)
      # "org.inkscape.Inkscape"               # Vector graphics editor (Illustrator alternative)
      # "org.pitivi.Pitivi"                   # Video editor (GNOME project)
      # "org.blender.Blender"                 # 3D modeling & rendering
      # "org.darktable.Darktable"             # Photo RAW processor

      # ====================================================================
      # ADDITIONAL WEB BROWSERS (If needed)
      # ====================================================================
      # "com.google.Chrome"                   # Google Chrome (proprietary, Flathub only)

      # ====================================================================
      # INTERNET & COMMUNICATION (Desktop Apps)
      # ====================================================================
      # "org.telegram.desktop"                # Telegram messenger (desktop)
      # "com.slack.Slack"                     # Slack desktop client
      # "org.thunderbird.Thunderbird"         # Email & calendar client
      # "io.Riot.Riot"                        # Matrix client for secure messaging
      # "com.obsproject.Studio"               # OBS Studio for streaming & recording

      # ====================================================================
      # DATABASE & TOOLS (GUI Applications)
      # ====================================================================
      # "org.dbeaver.DBeaverCommunity"        # Universal database client (MySQL, PostgreSQL)
      # "com.beekeeperstudio.Studio"          # Modern database IDE
      # "com.mongodb.Compass"                 # MongoDB GUI client

      # ====================================================================
      # REMOTE ACCESS & VIRTUALIZATION (GUI)
      # ====================================================================
      # "org.remmina.Remmina"                 # Remote desktop & SSH client
      # "com.freerdp.FreeRDP"                 # Remote Desktop Client (RDP)
      # "org.virt_manager.virt-manager"       # Virtual Machine Manager (KVM GUI)

      # ====================================================================
      # SECURITY & PRIVACY TOOLS (GUI Applications)
      # ====================================================================
      # "org.gnome.Secrets"                   # Password manager (KeePass alternative)
      # "org.keepassxc.KeePassXC"             # Password manager with sync
      # "com.github.Eloston.UngoogledChromium" # Privacy-focused Chromium
      # "com.tutanota.Tutanota"               # Encrypted email service

      # ====================================================================
      # ENTERTAINMENT & GAMING
      # ====================================================================
      # "com.valvesoftware.Steam"             # Steam game platform
      # "org.DolphinEmu.dolphin-emu"          # GameCube/Wii emulator
      # "net.rpcs3.RPCS3"                     # PlayStation 3 emulator
      # "org.libretro.RetroArch"              # Multi-system emulator (NES, SNES, Genesis)

      # ====================================================================
      # NOTE: CLI TOOLS & DEVELOPMENT PACKAGES
      # ====================================================================
      # The following packages are kept in home.packages (NOT Flatpak) for better integration:
      # - git, neovim, vim (code editors)
      # - Python, Go, Rust, Node.js (programming languages)
      # - ripgrep, fd, fzf, bat (modern CLI tools)
      # - tmux, zsh, starship (shell/terminal tools)
      # - pandoc (document converter)
      # - nix tools (nixpkgs-fmt, statix, etc.)
      # - All other CLI/terminal utilities
      #
      # These are better installed via NixOS packages because:
      # 1. Better shell integration and PATH handling
      # 2. Faster execution (no Flatpak sandbox overhead)
      # 3. Direct access to system libraries
      # 4. Simpler configuration in shell profiles
      # 5. Most are not available on Flathub anyway
    ];

    # Optional: Override remotes if using non-Flathub sources
    # remotes = {
    #   flathub = "https://dl.flathub.org/repo/flathub.flatpakrepo";
    # };

    # Optional: Set permissions globally for all Flatpak packages
    # permissions = {
    #   "org.freedesktop.Flatpak" = {
    #     # Grant host filesystem access
    #     Context.filesystems = [
    #       "home"
    #       "/mnt"
    #     ];
    #   };
    # };
  };

}
